using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Newtonsoft.Json;

namespace DiscordRest.Data
{
    public class Message : IDiscordDataObject
    {
        /// <summary>
        ///     id of the message
        /// </summary>
        public ulong Id { get; set; }

        /// <summary>
        ///     id of the channel the message was sent in
        /// </summary>
        public ulong ChannelId { get; set; }

        /// <summary>
        ///     the author of this message (not guaranteed to be a valid user, see below)
        /// </summary>
        public DiscordUser Author { get; set; }

        /// <summary>
        ///     contents of the message
        /// </summary>
        public string Content { get; set; }

        /// <summary>
        ///     when this message was sent
        /// </summary>
        public DateTime Timestamp { get; set; }

        /// <summary>
        ///     when this message was edited (or null if never)
        /// </summary>
        public DateTime? EditedTimestamp { get; set; }

        /// <summary>
        ///     whether this was a TTS message
        /// </summary>
        [JsonProperty("tts")]
        public bool WasTTS { get; set; }

        /// <summary>
        ///     whether this message mentions everyone
        /// </summary>
        public bool MentionedEveryone { get; set; }

        /// <summary>
        ///     users specifically mentioned in the message
        /// </summary>
        public IEnumerable<DiscordUser> Mentions { get; set; }

        /// <summary>
        ///     roles specifically mentioned in this message
        /// </summary>
        public IEnumerable<DiscordRole> MentionRoles { get; set; }

        /// <summary>
        ///     any attached files
        /// </summary>
        public IEnumerable<Attachment> Attachments { get; set; }

        /// <summary>
        /// 	any embedded content
        /// </summary>
        public IEnumerable<Embed> Embeds { get; set; }

        /// <summary>
        /// 	reactions to the message
        /// </summary>
        public IEnumerable<Reaction> Reactions { get; set; }

        /// <summary>
        /// 	used for validating a message was sent
        /// </summary>
        public ulong? Nonce { get; set; }

        /// <summary>
        /// 	whether this message is pinned
        /// </summary>
        [JsonProperty("pinned")]
        public bool IsPinned { get; set; }

        /// <summary>
        /// 	if the message is generated by a webhook, this is the webhook id
        /// </summary>
        [JsonProperty("webhook_id")]
        public string WebhookId { get; set; }
    }
}